{"version":3,"sources":["testToDo.js","todo.js","App.js","serviceWorker.js","index.js"],"names":["TestTodo","Component","state","element","items","onSubmit","event","preventDefault","setState","onChange","target","name","value","deleteTodo","index","arr","splice","renderTodo","map","item","className","key","onClick","Fragment","this","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAEqBA,G,MCCaC,Y,2MDC9BC,MAAQ,CACJC,QAAS,GACTC,MAAO,I,EAGXC,SAAW,SAACC,GACRA,EAAMC,iBAEN,EAAKC,SAAS,CACVL,QAAS,GACTC,MAAM,GAAD,mBAAM,EAAKF,MAAME,OAAjB,CAAwB,CAAED,QAAS,EAAKD,MAAMC,c,EAI3DM,SAAW,SAACH,GACR,EAAKE,SAAL,eACKF,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,S,EAI1CC,WAAa,SAACC,GACV,IAAMC,EAAM,EAAKb,MAAME,MACvBW,EAAIC,OAAOF,EAAO,GAClB,EAAKN,SAAS,CACVJ,MAAOW,K,EAIfE,WAAa,WACT,OAAO,EAAKf,MAAME,MAAMc,KAAI,SAACC,EAAML,GAC/B,OACI,yBAAKM,UAAU,YAAYC,IAAKP,GAC5B,yBAAKM,UAAU,aACX,4BAAKD,EAAKhB,QAAV,OAAwB,uBAAImB,QAAS,kBAAM,EAAKT,WAAWC,KAAnC,oB,wEAOxC,OACI,kBAAC,IAAMS,SAAP,KAEI,6BACI,0BAAMlB,SAAUmB,KAAKnB,UACjB,2BAAOoB,KAAK,OACRd,KAAK,UACLF,SAAUe,KAAKf,SACfG,MAAOY,KAAKtB,MAAMC,UAEtB,8CAIPqB,KAAKP,kB,GAxDgBhB,cEWvByB,MARf,WACE,OACE,yBAAKN,UAAU,aACb,kBAAC,EAAD,QCIcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f9a7686e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TestTodo extends Component {\r\n\r\n    state = {\r\n        element: '',\r\n        items: []\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            element: '',\r\n            items: [...this.state.items, { element: this.state.element }]\r\n        })\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    deleteTodo = (index) => {\r\n        const arr = this.state.items;\r\n        arr.splice(index, 1);\r\n        this.setState({\r\n            items: arr\r\n        })\r\n    }\r\n\r\n    renderTodo = () => {\r\n        return this.state.items.map((item, index) => {\r\n            return (\r\n                <div className='card mb-3' key={index}>\r\n                    <div className='card-body'>\r\n                        <h4>{item.element}&nbsp;<i  onClick={() => this.deleteTodo(index)}>supprimer</i></h4>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div>\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <input type='text'\r\n                            name='element'\r\n                            onChange={this.onChange}\r\n                            value={this.state.element}\r\n                        />\r\n                        <button>Add todo</button>\r\n\r\n                    </form>\r\n                </div>\r\n                {this.renderTodo()}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './todo.styles.css';\r\n\r\nexport default class Todo extends Component {\r\n\r\n    state = {\r\n        element: '',\r\n        items: []\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            element: '',\r\n            items: [...this.state.items, { element: this.state.element }]\r\n        })\r\n    }\r\n\r\n    deleteTodo = (index) => {\r\n        const arr = this.state.items;\r\n        arr.splice(index, 1);\r\n        this.setState({\r\n            items: arr\r\n        })\r\n    }\r\n\r\n    renderTodo = () => {\r\n        return this.state.items.map((item, index) => {\r\n            return (\r\n                <div className='card mb-3' key={index}>\r\n                    <div className='card-body'>\r\n                        <h4>{item.element}&nbsp;<i className='del' onClick={() => this.deleteTodo(index)}>supprimer</i></h4>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='card my-3'>\r\n                    <div className='card-header'>To-Do List</div>\r\n                    <div className='card-body'>\r\n                        <form onSubmit={this.onSubmit}>\r\n                            <div className='form-group'>\r\n                                <label htmlFor='element'>Chose à faire</label>\r\n                                <input\r\n                                    type='text'\r\n                                    className='form-control form-control-lg'\r\n                                    name='element'\r\n                                    onChange={this.onChange}\r\n                                    value={this.state.element}\r\n                                />\r\n                            </div>\r\n                            <button className='btn btn-primary btn-block'>\r\n                                Ajouter une chose à faire !\r\n                        </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                {this.renderTodo()}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Todo from './todo';\nimport TestTodo from './testToDo'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <TestTodo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}